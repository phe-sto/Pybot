'''Class generated by Pybot Framework'''
import unittest
from os import system

from lackey import *

from XMLTestRunner1 import *

###########################################################################################################################################
# Jython source to be used in sikuli, not pure python or python3
# Initialize the script by importing the required libraries for test (a.k.a unittest) and system to using windows commands.
# Source description
###########################################################################################################################################
"XML for test results"
"Import unittest in case of test automation"
"To start program of command"

"Source description"
__author__ = "Christophe Brun"
__credits__ = ["Christophe Brun", "Somfy"]
__license__ = "This document and/or file is SOMFY's property. All information it contains is strictly confidential. This document and/or file shall not be used, reproduced or passed on in any way, in full or in part without SOMFY's prior written approval. All rights reserved."
__version__ = "1.0.0"
__maintainer__ = "Christophe Brun"
__email__ = "christophe.brun.external@somfy.com"
__status__ = "Developpement"

###########################################################################################################################################
# Cannot be in separated file due to special sikuli methods (e.g type, paste, input, etc).
# Custom class to be used in as an abstraction layer to sikuli methods and corresponding exception.
# Can used command to start program or use commands.
###########################################################################################################################################

"Abstraction layer to sikuli methods. To be used Sikuli IDE to automate task. Could be testing or any other task to automate"


class AutoException(Exception):
    "Automation problem with exception"
    pass


class Auto:
    "Something to automate on a computer, a task, a test, etc"

    def __init__(self):
        "Constructor of the Auto class"
        pass

    def check_click(self, img, sleep_sec=0, after_click=None):
        "Method checking if bouton exist and clicking on it, return True is clicked False on contrary. Eventually sleep sleep_sec seconds after"
        if exists(img) is None:
            return False
        else:
            click(img)
            if after_click is not None and exists(after_click) is not None:
                click(after_click)
            self._check_n_sleep(sleep_sec)
            return True

    def wait_click(self, img, sleep_sec=0):
        "Method that wait for a bouton to appear and click on it. Eventually sleep sleep_sec seconds after"
        wait(img)
        click(img)
        self._check_n_sleep(sleep_sec)

    def type_n_time(self, n, key, sleep_sec=0):
        "Type n time the desired key. Eventually sleep sleep_sec seconds"
        i = 0
        while(i < n):
            type(key)
            self._check_n_sleep(sleep_sec)
            i += 1

    def exec_win_cmd(self, cmd, sleep_sec=0):
        "Execute command on Windows OS"
        rt = system('CMD /C "{0}"'.format(cmd))
        self._check_n_sleep(sleep_sec)
        return rt == 0

    def start_win_pgm(self, wd, pgm, sleep_sec=0):
        "Start a program in background in a given directory on Windows OS"
        rt = system('CMD /C "cd {0} && START /B {1}"'.format(wd, pgm))
        self._check_n_sleep(sleep_sec)
        return rt == 0

    def _check_n_sleep(self, s):
        "Sleep for s seconds once checked that argument is int or float"
        if isinstance(s, int) or isinstance(s, float):
            sleep(s)
        else:
            AutoException(
                "sleep_sec KWARG is a time in to sleep after click, therefore must be an int or float")

    def __repr__(self):
        " Description of the auto object"
        return "Sikuli automaton"

###########################################################################################################################################
# Test script as a unittest class. Test the Android TahomaBee application. The target device is an Android Nexus 6P.
# Custom method to be used in the test.
# They begin and end by closing other apps and closing scrcpy mirroring soft.
# test_A_clean_app: Test all the apps are closed
# test_B_open_TahomaBee: Test that TahomaBee application is open
# test_C_connexion: Test the connection with credentials
# test_E_motor_unconnected_up_down_up: Test that the motor is moving up and down
# test_D_motor_connected_up_down_up test that the motor is not moving
# test_F_configuration: Test access to  the configuration
# test_Z_leave_app: Test that all applications are closed and scrcpy as well
###########################################################################################################################################


class TahomaBeeTest(unittest.TestCase, Auto):
    def kill_scrcpy(self):
        " Use command to kil all scrcpy.exe on Windows OS"
        # Kill scrcpy
        while exists("img/1525701181175.png") is not None:
            # Command to kill scrcpy
            self.exec_win_cmd("Taskkill /IM scrcpy.exe /F")

    def close_app(self):
        " Clean the application that might be open on the target device"
        while exists("img/1525695903814.png") is None:
            if self.check_click("img/1525682405778.png", after_click="img/1525683200318.png") is True:
                sleep(2)
            if exists("img/1525695903814.png") is not None:
                break
            if self.check_click("img/1525682363441.png", after_click="img/1525683447606.png") is True:
                sleep(2)

    def setUp(self):
        "Nothing to do yet"
        pass

    def tearDown(self):
        "Nothing to do yet"
        pass

    def test_A_clean_app(self):
        " Kill all scrcpy before starting a new one for android mirroring"
        # Kill scrcpy
        self.kill_scrcpy()
        # Start a new scrcpy
        self.start_win_pgm("scrcpy-windows-v1.1", "scrcpy.exe")
        # Fullscreen
        rightClick("img/1525685897078.png")
        click("img/1525685943369.png")
        rightClick()
        # Unlock the phone if needed
        if exists("img/1525682278715.png") is not None:
            dragDrop("img/1525682278715.png", "img/1525682325573.png")
        # Clean the application that might be open on the target device
        self.close_app()
        # Access the app screen
        click("img/1525685342870.png")
        assert exists("img/1525683094268.png") is not None

    def test_B_open_TahomaBee(self):
        "Start the TahomaBee application"
        self.check_click("img/1525683094268.png")
        self.check_click("img/1525683073786.png")
        sleep(15)
        assert exists(
            "img/1525683551858.png") is not None or exists("img/1525683633286.png") is not None

    def test_C_connexion(self):
        "Connection test to the TahomaBee with Florian Kowalski Credentials"
        if exists("img/1525683551858.png") is None:
            # Enter the credentials and connect the application
            paste("img/1525697538725.png", 'florian.kowalski')
            sleep(0.5)
            paste("img/1525696983510.png", 'connex01')
            sleep(0.5)
            click("img/1525697121889.png")
            sleep(15)
        else:
            # Already connected
            pass
        assert exists("img/1525683551858.png") is not None

    def test_Z_leave_app(self):
        "Test to kill scrcpy process after closing all apps"
        # Clean the application that might be open on the target device
        self.close_app()
        assert exists(
            "img/1525683551858.png") is None and exists("img/1525683633286.png") is None
        self.kill_scrcpy()
        assert exists("img/1525701181175.png") is None

    def test_D_motor_connected_up_down_up(self):
        "Test that a motor is accessible"
        assert exists("img/1525706502609.png") is not None
        self.check_click("img/1525706502609.png")
        assert exists("img/1525706982307.png") is not None
        self.check_click("img/1525707172817.png")
        sleep(5)
        self.check_click("img/1525707172817.png")
        dragDrop("img/1525707221915.png", "img/1525707234856.png")
        self.check_click("img/1525707501652.png")
        sleep(30)
        self.check_click("img/1525707462863.png")

        assert exists("img/1525708156426.png") is not None
        self.check_click("img/1525707172817.png")
        sleep(5)
        self.check_click("img/1525707172817.png")
        self.check_click("img/1525707501652.png")
        assert exists("img/1525706502609.png") is not None

    def test_E_motor_unconnected_up_down_up(self):
        "Test that a motor is not accessible"
        assert exists("img/1525706544677.png") is not None
        self.check_click("img/1525706544677.png")
        assert exists("img/1525706982307.png") is not None
        self.check_click("img/1525707172817.png")
        sleep(5)
        self.check_click("img/1525707172817.png")
        dragDrop("img/1525707221915.png", "img/1525707234856.png")
        self.check_click("img/1525707501652.png")
        sleep(30)
        self.check_click("img/1525706544677.png")

        assert exists("img/1525708156426.png") is None
        self.check_click("img/1525708554886.png")
        assert exists("img/1525706544677.png")

    def test_F_configuration(self):
        "Test Access to configuration"
        self.check_click("img/1525708768155.png")
        assert exists("img/1525708801293.png") is not None
        self.check_click("img/1525708801293.png")
        assert exists("img/1525708858247.png") is not None


########################################################################################################################################
# Start test, and produce the XML and print the errors
###########################################################################################################################################
suite = unittest.TestLoader().loadTestsFromTestCase(TahomaBeeTest)
result = XMLTestRunner(file("TahomaBee.sikuli/unittest.xml", "w")).run(suite)
print((result.errors))
